{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","API_URL","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","setMovies","useState","setQuery","selectedMovie","selectMovie","notFound","setNotFound","isLoading","setIsLoading","convertMovieFormat","Title","Plot","Poster","imdbID","findMovie","inputQuery","a","response","Promise","reject","onSubmit","event","preventDefault","finally","submitHandler","htmlFor","type","id","placeholder","value","onChange","target","classNames","disabled","onClick","isDuplicate","some","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b229628.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst key = '83426f50';\nconst API_URL = `https://www.omdbapi.com/?apikey=${key}`;\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport './FindMovie.scss';\n\nimport classNames from 'classnames';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieData } from '../../types/MovieData';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  movies: Movie[] | null\n  setMovies: (movies: Movie[]) => void\n};\n\nexport const FindMovie: React.FC<Props> = ({ movies, setMovies }) => {\n  const [query, setQuery] = useState('');\n  const [selectedMovie, selectMovie] = useState<Movie | null>(null);\n  const [notFound, setNotFound] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const convertMovieFormat = ({\n    Title,\n    Plot,\n    Poster,\n    imdbID,\n  }: MovieData) => ({\n    title: Title,\n    description: Plot,\n    imgUrl: Poster === 'N/A'\n      ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n      : Poster,\n    imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n    imdbId: imdbID,\n  });\n\n  const findMovie = async (inputQuery: string) => {\n    try {\n      await getMovie(inputQuery)\n        .then(response => {\n          if ('Error' in response) {\n            return Promise.reject();\n          }\n\n          const movie = convertMovieFormat(response);\n\n          return selectMovie(movie);\n        });\n    } catch {\n      setNotFound(true);\n    }\n  };\n\n  const submitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n    findMovie(query)\n      .finally(() => setIsLoading(false));\n  };\n\n  const addMovie = () => {\n    const isDuplicate = movies?.some(movie => movie.imdbId === selectedMovie?.imdbId);\n\n    if (movies && selectedMovie && !isDuplicate) {\n      setMovies([...movies, selectedMovie]);\n    }\n\n    selectMovie(null);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={(event) => submitHandler(event)}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={(event) => {\n                setQuery(event.target.value);\n                setNotFound(false);\n              }}\n            />\n          </div>\n\n          {notFound && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button', 'is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={!query}\n            >\n              {!selectedMovie ? 'Find a movie' : 'Search again'}\n            </button>\n          </div>\n\n          {selectedMovie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={addMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {selectedMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={selectedMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie setMovies={setMovies} movies={movies} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}